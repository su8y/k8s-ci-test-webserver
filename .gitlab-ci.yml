default:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  SERVICE_NAME: "demo"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  KUBERNETES_PRIVILEGED: "true"

# servic: docker:20.10.17-dind

stages:
  # build image를 위해서 잠깐 없애놈
  # - build-package-gradle 
  - build-image
  - deploy-package-gradle

build-package-gradle 1/1:
  image: alpine/java:21-jdk
  stage: build-package-gradle
  before_script:
    - chmod 777 ./gradlew
  script:
    - echo [INFO] gradle build시작
    - ./gradlew build
  only:
    - main
    - dev
    - merge_requests
    - /^feat\/.*$/ # 특정 브랜치 패턴에서 실행

build-image 1/1:
  stage: build-image
  image:
     name: gcr.io/kaniko-project/executor:debug
     entrypoint: [""] #script tag를 사용하기 위한 override
  script:
    - echo [INFO] start image build 
    - echo HARBORURL= ${HARBOR_URL}
    - echo "{\"auths\":{\"$HARBOR_URL\":{\"username\":\"$HARBOR_USER\",\"password\":\"$HARBOR_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Gitlab에 미리 정의된 Variables 사용
    # CI_PROJECT_DIR : Dockerfile을 포함한 Source Repositry 경로
    # CI_COMMIT_SHORT_SHA : Commit SHA의 앞 8자를 tag로 사용
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $HARBOR_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA

deploy-package-gradle 2/2:
  stage: deploy-package-gradle
  when: on_success
  script:
    - echo [INFO] start kubectl registry
    - kubectl create ns my-demo
    - kubectl apply -f deployment.yaml -n my-demo:$CI_COMMIT_REF_NAME
  only:
    - main
    - dev
    - merge_requests
    - /^feat\/.*$/ # 특정 브랜치 패턴에서 실행
